@page "/products"
@attribute [Authorize(Roles = "Admin")]

@using Hardware4You.Data
@using Hardware4You.Models
@using Syncfusion.Blazor.Grids
@using Microsoft.AspNetCore.Components.Forms
@inject IProductService ProductService

<PageTitle>Produkte verwalten</PageTitle>

<MudGrid Class="pb-12">
    <!-- Products Label -->
    <MudItem xs="12">
        <MudPaper Class="d-flex justify-content-center" Style="@($"background:#F0F0F0")" Elevation="0">
            <MudPaper Class="flex-auto pt-2" Style="@($"color:{Colors.Green.Darken3}; padding-bottom:12px; background:{Colors.Shades.Transparent}")">
                <MudText Typo="Typo.h4" Class="text-center" Style="font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; font-weight:bold">Produkte verwalten</MudText>
            </MudPaper>
        </MudPaper>
    </MudItem>
</MudGrid>

<SfGrid DataSource="@HardwareProducts" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update" })" TValue="Product">
    <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Normal"></GridEditSettings>
    <GridEvents OnActionBegin="ActionBeginHandler" OnActionComplete="ActionCompleteHandler" TValue="Product"></GridEvents>
    <GridColumns>
        <GridColumn Field="@nameof(Product.Id)" IsPrimaryKey="true" IsIdentity="true" Visible="false"></GridColumn>
        <GridColumn Field="@nameof(Product.Name)" Width="100"></GridColumn>
        <GridColumn Field="@nameof(Product.Description)" Width="150"></GridColumn>
        <GridColumn Field="@nameof(Product.Media)" HeaderText="Image" Width="150">
            <Template>
                @{
                    var product = context as Product;
                    var imageUrl = product.Media;
                    var base64Image = Convert.ToBase64String(imageUrl);
                    var imageSource = $"data:{product.MediaType};base64,{base64Image}";

                    <div class="image">
                        <img src="@imageSource" alt="Product Image" />
                    </div>
                }
            </Template>
            <EditTemplate>
                <SfUploader AllowedExtensions="*" Multiple="false">
                    <UploaderEvents ValueChange="@OnChange"></UploaderEvents>
                </SfUploader>
            </EditTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(Product.Price)" Width="50"></GridColumn>
        <GridColumn Field="@nameof(Product.Quantity)" Width="50"></GridColumn>
        <GridColumn Field="@nameof(Product.CategoryId)" Width="50"></GridColumn>
    </GridColumns>
</SfGrid>

<style>

    .image img {
        width: auto;
        height: auto;
        max-width: 100%; /* Stellt sicher, dass das Bild die Breite des Containers nicht überschreitet */
        max-height: 100%; /* Stellt sicher, dass das Bild die Höhe des Containers nicht überschreitet */
        box-shadow: inset 0 0 1px #e0e0e0, inset 0 0 14px rgba(0, 0, 0, 0.2);
    }

</style>

@code {
    private TaskCompletionSource<bool> mediaChangeCompleted = new TaskCompletionSource<bool>();
    public IEnumerable<Product> HardwareProducts { get; set; } = null!;
    private Product product = new();

    protected override void OnInitialized()
    {
        HardwareProducts = ProductService.GetProducts();
    }

    private async Task OnChange(UploadChangeEventArgs args)
    {
        try
        {
            foreach (var file in args.Files)
            {
                try
                {
                    // Aktualisierung Sie die Eigenschaften Media und MediaType des Produkts
                    using var memoryStream = new MemoryStream();
                    await file.File.OpenReadStream().CopyToAsync(memoryStream);
                    product.Media = memoryStream.ToArray();
                    product.MediaType = file.FileInfo.Type;

                    System.Diagnostics.Debug.WriteLine($"Media property set. Length: {product.Media.Length}, Type: {product.MediaType}");
                    System.Diagnostics.Debug.WriteLine($"product Media value in after setting in OnChange: product.Media-> {product.Media}");
                    // Aufgabe erst nach Einstellung der Eigenschaft Medien als erledigt festlegen
                    mediaChangeCompleted.SetResult(true);
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine($"Error updating Media property: {ex.Message}");
                }
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error in OnChange method: {ex.Message}");
        }
    }


    private async Task ActionBeginHandler(ActionEventArgs<Product> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            await mediaChangeCompleted.Task;
            switch (Args.Action)
            {
                case "Add":    
                    if (Args.Data.Media == null)
                    {
                        Args.Data.Media = product.Media;
                        Args.Data.MediaType = product.MediaType;
                        await ProductService.InsertProductAsync(Args.Data); // await benutzen
                    }
                    else
                    {                        
                        System.Diagnostics.Debug.WriteLine("Media is still NULL even after passing it");
                    }
                    break;

                case "Edit":
                    System.Diagnostics.Debug.WriteLine($"Edit action detected. Args.Data: {Args.Data}");
                    ProductService.UpdateProduct(Args.Data.Name, Args.Data);
                    break;

                case "Delete":
                    System.Diagnostics.Debug.WriteLine($"Delete action detected. Args.Data: {Args.Data}");
                    ProductService.DeleteProduct(Args.Data.Id);
                    break;
            }
        }

        mediaChangeCompleted = new TaskCompletionSource<bool>();
    }



    public void ActionCompleteHandler(ActionEventArgs<Product> Args)
    {
        // wird ausgelöst, wenn die CRUD-Aktion abgeschlossen ist.
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            HardwareProducts = ProductService.GetProducts(); // um die aktualisierten Daten aus der Datenbank in das Grid zu holen
        }
    }
}



